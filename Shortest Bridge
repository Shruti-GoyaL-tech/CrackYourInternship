class Solution {
public:

    vector<int> dr={0,0,-1,1};
    vector<int> dc={-1,1,0,0};

    void dfs(vector<vector<int>>& grid, int i, int j, int &r, int &c, vector<vector<bool>> &vis, queue<pair<int,int>> &q){
        vis[i][j]=1;
        q.push({i,j});
        for(int k=0; k<4; k++){
            if(i+dr[k]<0||i+dr[k]>=r||j+dc[k]<0||j+dc[k]>=c||vis[i+dr[k]][j+dc[k]]||grid[i+dr[k]][j+dc[k]]==0){
                continue;
            }
            dfs(grid, i+dr[k], j+dc[k], r, c, vis, q);
        }
    }

    int shortestBridge(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int r=grid.size();
        int c=grid[0].size();
        vector<vector<bool>> vis(r, vector<bool>(c,0));
        bool flag=0;
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                if(grid[i][j]==1){
                    dfs(grid, i, j, r, c, vis, q);
                    flag=1;
                    break;
                }
            }
            if(flag==1) break;
        }
        int steps=0;
        while(!q.empty()){
            int size=q.size();
            steps++;
            for(int i=0; i<size; i++){
                int tempi=q.front().first;
                int tempj=q.front().second;
                q.pop();
                for(int k=0; k<4; k++){
                    if(tempi+dr[k]<0||tempi+dr[k]>=r||tempj+dc[k]<0||tempj+dc[k]>=c||vis[tempi+dr[k]][tempj+dc[k]]){
                        continue;
                    }
                    if(grid[tempi+dr[k]][tempj+dc[k]]==0){
                        vis[tempi+dr[k]][tempj+dc[k]]=1;
                        q.push({tempi+dr[k], tempj+dc[k]});
                    }
                    else{
                        return steps-1;
                    }
                }
            }
        }
        return steps-1;
    }
};
