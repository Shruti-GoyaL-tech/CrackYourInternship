// class Solution {
// public:
//     void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
//         int i=0;
//         int j=0;
//         int num1s=0;
//         while(num1s<m && j<nums2.size()){
//             if(nums1[i]<=nums2[j]){
//                 i++;
//                 num1s++;
//             }
//             else{
//                 for(int k=nums1.size()-1; k>i; k--){
//                     nums1[k]=nums1[k-1];
//                 }
//                 nums1[i]=nums2[j];
//                 i++;
//                 j++;
//             }
//         }
//         while(j<nums2.size()){
//             nums1[i]=nums2[j];
//             i++;
//             j++;
//         }
//     }
// };

// class Solution {
// public:
//     void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
//         // for(int i=m; i<m+n; i++){
//         //     nums1[i]=nums2[i-m];
//         // }
//         // sort(nums1.begin(),nums1.end());
//         for (int j = 0, i = m; j<n; j++, i++){
//             nums1[i] = nums2[j];
//         }
//         sort(nums1.begin(),nums1.end());
//     }
// };

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int * temp = new int[m+n];
        int i=0;
        int j=0;
        int k=0;
        while(i<m && j<n){
            if(nums1[i]<nums2[j]){
                temp[k++]=nums1[i++];
            }
            else{
                temp[k++]=nums2[j++];
            }
        }
        while(i<m){
            temp[k++]=nums1[i++];
        }
        while(j<n){
            temp[k++]=nums2[j++];
        }
        k=0;
        i=0;
        while(i<m+n){
            nums1[i++]=temp[k++];
        }
        delete[] temp;
    }
};
