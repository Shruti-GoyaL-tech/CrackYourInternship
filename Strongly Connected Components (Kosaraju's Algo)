class Solution
{   
    
    void dfs1(int node, vector<vector<int>>& adj, vector<bool> &vis, stack<int> &st){
        vis[node]=1;
        for(auto i:adj[node]){
            if(!vis[i]){
                dfs1(i, adj, vis, st);
            }
        }
        st.push(node);
    }
    
    
    int dfs2(int node, vector<vector<int>>& adj, vector<bool> &vis){
        vis[node]=1;
        for(auto i:adj[node]){
            if(!vis[i]){
                dfs2(i, adj, vis);
            }
        }
    }
    
	public:
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        //code here
        vector<bool> vis(V,0);
        stack<int> st;
        for(int i=0; i<V; i++){
            if(!vis[i]){
                dfs1(i, adj, vis, st);
            }
        }
        vector<vector<int>> adjrev(V);
        for(int i=0; i<V; i++){
            for(int j=0; j<adj[i].size(); j++){
                adjrev[adj[i][j]].push_back(i);
            }
        }
        for(int i=0; i<vis.size(); i++){
            vis[i]=0;
        }
        int cnt=0;
        while(!st.empty()){
            int i=st.top();
            st.pop();
            if(!vis[i]){
                // cout<<i<<" ";
                cnt++;
                dfs2(i, adjrev, vis);
            }
        }
        return cnt;
    }
};
