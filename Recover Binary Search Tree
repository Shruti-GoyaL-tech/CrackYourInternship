/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

TreeNode* prev;
TreeNode* first;
TreeNode* mid;
TreeNode* last;
    void morris_inorder(TreeNode* root){
        while(root!=NULL){


            if(root->val<prev->val){
                if(first==NULL){
                    first=prev;
                    mid=root;
                }
                else{
                    last=root;
                }
            }



            if(root->left==NULL){
                prev=root;
                root=root->right;
            }
            else{
                TreeNode* pred= root->left;
                while(pred->right!=NULL && pred->right!=root){
                    pred=pred->right;
                }
                if(pred->right==NULL){
                    pred->right=root;
                    root=root->left;
                }
                else{
                    pred->right=NULL;
                    prev=root;
                    root=root->right;
                }
            }
        }
    }

    void recoverTree(TreeNode* root) {
        prev=new TreeNode(INT_MIN);
        morris_inorder(root);

        if(last==NULL){
            int temp=first->val;
            first->val=mid->val;
            mid->val=temp;
        }
        else{
            int temp=first->val;
            first->val=last->val;
            last->val=temp;
        }
    }
};


// Link :- https://youtu.be/ZWGW7FminDM?si=EzxJFbm91anmGXK5
