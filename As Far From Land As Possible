// class Solution {
//     vector<int> delRow={0,0,-1,1};
//     vector<int> delCol={-1,1,0,0};

//     int nearest(int i, int j , vector<vector<int>>& grid, vector<vector<bool>> vis){
//         queue<pair<int,int>> q;
//         q.push({i,j});
//         vis[i][j]=1;
//         int cnt=0;
//         while(!q.empty()){
//             int size=q.size();
//             cnt++;
//             while(size>0){
//                 int ni=q.front().first;
//                 int nj=q.front().second;
//                 q.pop();
//                 for(int k=0; k<4; k++){
//                     int nii=ni+delRow[k];
//                     int njj=nj+delCol[k];
//                     if(nii<0||nii>=grid.size()||njj<0||njj>=grid[0].size()||vis[nii][njj]){
//                         continue;
//                     }
//                     else if(grid[nii][njj]==0){
//                         q.push({nii,njj});
//                         vis[nii][njj]=1;
//                     }
//                     else{
//                         return cnt;
//                     }
//                 }
//                 size--;
//             }
//         }
//         return -1;
//     }

// public:
//     int maxDistance(vector<vector<int>>& grid) {
//         vector<vector<bool>> vis(grid.size(), vector<bool>(grid[0].size(),0));
//         int cnt=-1;
//         for(int i=0; i<grid.size(); i++){
//             for(int j=0; j<grid[0].size(); j++){
//                 if(grid[i][j]==0){
//                     cnt=max(cnt,nearest(i,j,grid,vis));
//                 }
//             }
//         }
//         return cnt;
//     }
// };
class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size();
        queue<pair<int, int>> q;

        // Push all 1s into the queue and mark them as visited
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    q.push({i, j});
                }
            }
        }

        // If there are no 0s or 1s, return -1
        if (q.empty() || q.size() == n * n) return -1;

        // Directions for movement (left, right, up, down)
        vector<int> delRow = {0, 0, -1, 1};
        vector<int> delCol = {-1, 1, 0, 0};

        int maxDistance = -1;

        // Perform BFS
        while (!q.empty()) {
            int size = q.size();
            maxDistance++;
            while (size--) {
                int x = q.front().first;
                int y = q.front().second;
                q.pop();

                for (int k = 0; k < 4; k++) {
                    int newX = x + delRow[k];
                    int newY = y + delCol[k];

                    // Check if the new position is within bounds and is an unvisited 0
                    if (newX >= 0 && newX < n && newY >= 0 && newY < n && grid[newX][newY] == 0) {
                        grid[newX][newY] = 1;  // Mark as visited
                        q.push({newX, newY});
                    }
                }
            }
        }

        return maxDistance;
    }
};
