/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
// SC = O(n)
    // int init=0;
    // vector<int> inorder;
    // void inorder_traversal(TreeNode* root){
    //     if(root==NULL) return;
    //     inorder_traversal(root->left);
    //     inorder.push_back(root->val);
    //     inorder_traversal(root->right);
    // }
    // BSTIterator(TreeNode* root) {
    //     inorder.push_back(-1);
    //     inorder_traversal(root);
    // }
    
    // int next() {
    //     init++;
    //     return inorder[init];
    // }
    
    // bool hasNext() {
    //     if(init==inorder.size()-1) return false;
    //     return true;
    // }


// SC = O(h)
    stack<TreeNode*> s;

    void last_element(TreeNode* root){
        while(root){
            s.push(root);
            root=root->left;
        }
    }

    BSTIterator(TreeNode* root) {
        last_element(root);
    }
    
    int next() {
        TreeNode* temp=s.top();
        s.pop();
        if(temp->right) last_element(temp->right);
        return temp->val;
    }
    
    bool hasNext() {
        if(s.empty()) return false;
        return true;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
