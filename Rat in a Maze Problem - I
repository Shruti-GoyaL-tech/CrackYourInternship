//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution {
  public:
    void f(vector<vector<int>> &mat, int i, int j, vector<vector<int>> &vis, string s, vector<string> &ans){
        int n=mat.size();
        int m=mat[0].size();
        if(i<0||i>=n||j<0||j>=m||vis[i][j]==1||mat[i][j]==0){
            return ;
        }
        if(i==n-1&&j==m-1&&mat[i][j]==1){
            ans.push_back(s);
            return;
        }
        vis[i][j]=1;
        f(mat,i,j+1,vis,s+'R',ans);
        f(mat,i,j-1,vis,s+'L',ans);
        f(mat,i-1,j,vis,s+'U',ans);
        f(mat,i+1,j,vis,s+'D',ans);
        vis[i][j]=0;
    }
    vector<string> findPath(vector<vector<int>> &mat) {
        // Your code goes here
        vector<string> ans;
        vector<vector<int>> vis(mat.size(),vector<int>(mat[0].size(),0));
        f(mat,0,0,vis,"",ans);
        return ans;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++)
                cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
