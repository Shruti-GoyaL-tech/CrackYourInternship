/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool match(TreeNode* root, TreeNode* subRoot){
        if(root==NULL && subRoot==NULL){
            return true;
        }
        if((root==NULL && subRoot!=NULL) || (root!=NULL && subRoot==NULL)){
            return false;
        }

        if(root->val!=subRoot->val) return false;

        bool left=match(root->left, subRoot->left);
        bool right=match(root->right, subRoot->right);

        return left && right;
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(root==NULL && subRoot==NULL){
            return true;
        }
        if(root==NULL) return false;

        int ans = match(root, subRoot);
        if(ans==true){
            return true;
        }
        bool ans_left=isSubtree(root->left, subRoot);
        if(ans_left==true){
            return true;
        }
        bool ans_right=isSubtree(root->right, subRoot);
        if(ans_right==true){
            return true;
        }
        return false;
    }
};
