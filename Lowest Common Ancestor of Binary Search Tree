/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        // For Binary Tree
        // if(root==NULL) return NULL;
        // if(root==p) return p;
        // if(root==q) return q;
        

        // TreeNode* left= lowestCommonAncestor(root->left,p,q);
        // TreeNode* right= lowestCommonAncestor(root->right,p,q);
        // if(left!=NULL && right!=NULL) return root;
        // if(left!=NULL) return left;
        // return right;


        // For Binary Search Tree
        if(root==NULL) return NULL;
        if((root->val>=p->val && root->val<=q->val) || (root->val<=p->val && root->val>=q->val) ) return root;

        if(root->val>p->val){
            TreeNode* left= lowestCommonAncestor(root->left,p,q);
            if(left!=NULL) return left;
        }

        TreeNode* right= lowestCommonAncestor(root->right,p,q);
        return right;
    }
};
